TestCase subclass: #PolinomioTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioTest commentStamp: '<historical>' prior: 0!A PolinomioTest is a test class for testing the behavior of Polinomio!!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'vane 6/13/2013 16:48'!polinomio1	"comment stating purpose of message"	| res dict aItem |	dict:= Dictionary new.	aItem := Association.	aItem key: 0 value: 69.	dict add: aItem.	aItem key: 1 value: 1.	dict add: aItem.	res := Polinomio new: 1 conCoeficientes: dict.	^res.! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'vane 6/13/2013 16:44'!polinomio2	| res dict aItem |	dict:= Dictionary.	aItem := Association.	aItem key: 0 value: 69.	dict add: aItem.	res := Polinomio new: 0 conCoeficientes: dict.	^res.! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'vane 6/13/2013 16:45'!polinomio3	| res dict aItem |	dict:= Dictionary.	aItem := Association.	aItem key: 3 value: 1.	dict add: aItem.	res := Polinomio new: 3 conCoeficientes: dict.	^res.! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'vane 6/13/2013 16:47'!polinomio4	| res dict aItem |	dict:= Dictionary.	aItem := Association.	aItem key: 3 value: 1.	dict add: aItem.	aItem key: 1 value: 7.	dict add: aItem.	aItem key: 0 value: 90.	dict add: aItem.	res := Polinomio new: 3 conCoeficientes: dict.	^res.! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'ManuelGimenez 6/5/2013 18:53'!polinomio5	self shouldBeImplemented .! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'ManuelGimenez 6/5/2013 18:53'!polinomio6	self shouldBeImplemented .! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'ManuelGimenez 6/5/2013 18:53'!polinomio7	self shouldBeImplemented .! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'ManuelGimenez 6/5/2013 18:53'!polinomio8	self shouldBeImplemented .! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:14'!testCoeficientes	"Test de coeficientes de polinomios"		|  polinomio1 polinomio4 |		polinomio1 := self polinomio1.	polinomio4 := self polinomio4.		self assert: ((polinomio1 coeficientes at: 0) = 69).	self assert: ((polinomio1 coeficientes at: 1) = 1).	self assert: ((polinomio4 coeficientes at: 0) = 90).	self assert: ((polinomio4 coeficientes at: 1) = 7).	self assert: ((polinomio4 coeficientes at: 3) = 1).	self assert: ( (polinomio4 coeficientes includesKey: 2) not).	self assert: ( (polinomio4 coeficientes includesKey: 4) not).	self assert: ( (polinomio4 coeficientes size) = 3).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/10/2013 12:03'!testEvaluar	"Test de evaluación de polinomios"	| polinomio1 polinomio2 polinomio3 polinomio4 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio4 := self polinomio4.		self assert: ( (polinomio1 evaluar:  11) = 80).		self assert: ( (polinomio2 evaluar: nil) = 69).	self assert: ( (polinomio2 evaluar: 23) = 69).		self assert: ( (polinomio3 evaluar: 3) = 27).		self assert: ( (polinomio4 evaluar: 2) = 112).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/5/2013 19:00'!testGrado	| polinomio1 polinomio2 polinomio3 polinomio4 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio4 := self polinomio4.		self assert: (polinomio1 grado = 1).	self assert: (polinomio2 grado = 0).	self assert: (polinomio3 grado = 3).	self assert: (polinomio4 grado = 3).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/10/2013 12:05'!testIgualdad	"Test de igualdad de polinomios"	| polinomio1 polinomio2 polinomio3 polinomio5 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio5 := self polinomio5.		self assert: ( polinomio1 = polinomio1 ).	self assert: ( (polinomio1 = polinomio2) not ).	self assert: ( polinomio3 = polinomio5).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:18'!testMetaprogramacion	| polinomio |		polinomio := self polinomio1 .	self assert: ( (polinomio evaluar: (PolinomioTest new)  ) = 'AlguienNoEntiende' ).	self assert:( (polinomio evaluar: '12') = 81). ! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/5/2013 19:02'!testMultiplicacion	"Test de multiplicacion de polinomios"	| polinomio3 polinomio5 polinomio6 polinomio7 |		polinomio3 := self polinomio3.	polinomio5 := self polinomio5.	polinomio6 := self polinomio6.	polinomio7 := self polinomio7.		self assert: (polinomio6 * polinomio7 = polinomio3).	self assert: (polinomio7 * polinomio6 = polinomio3).	self assert: (polinomio6 * polinomio7 = polinomio5).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/5/2013 19:02'!testSuma	"Test suma de polinomios"	| polinomio1 polinomio2 polinomio6|		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio6 := self polinomio6.		self assert: (polinomio2 + polinomio6 = polinomio1).	self assert: (polinomio6 + polinomio2 = polinomio1).	! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:16'!testSupremo	"El test supremo de los polinomios"	| polinomio3 polinomio6 polinomio7 polinomio8 |		polinomio3 := self polinomio3.	polinomio6 := self polinomio6.	polinomio7 := self polinomio7.	polinomio8 := self polinomio8.			self assert: ( (polinomio6 evaluar: polinomio7) = polinomio7).		self assert: ( (polinomio3 evaluar: polinomio6) = polinomio3).		self assert: ( (polinomio3 evaluar: polinomio7) = polinomio8). 		self assert: ( (polinomio7 evaluar: polinomio3) = polinomio8). ! !Object subclass: #Polinomio	instanceVariableNames: 'coeficientes grado'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!Polinomio methodsFor: 'as yet unclassified' stamp: 'vane 6/13/2013 16:51'!* otroPolinomio	| res aItem selfValue otherValue deg |	res := Polinomio new.	res.grado := self.grado + otroPolinomio.grado.	res.coeficientes := Dictionary new.	self.coeficientes keysDo: [ :selfKey |		otroPolinomio.coeficientes keysDo: [ :aKey |				aItem := Association new.				selfValue := self.coeficientes at: selfKey.				otherValue := otroPolinomio.coeficientes at: aKey.				deg := aKey + selfKey.				aItem key: deg value: res.coeficientes at: deg ifAbsent: 0 + selfValue * otherValue .				res.coeficientes add: aItem.			 ]		  ].	 ^res! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'vane 6/13/2013 16:51'!+ otroPolinomio	| res aItem |	res := Polinomio new.	self.grado > otroPolinomio.grado ifTrue: [ res.grado := self.grado ] ifFalse: [ res.grado := otroPolinomio.grado ].	res.coeficientes := Dictionary new.	self.coeficientes keysDo: [ :selfKey |		aItem := Association new.		aItem key: selfKey value: self.coeficientes at:selfKey.		res.coeficientes add: aItem.]	otroPolinomio.coeficientes keysDo: [ :aKey |		aItem :=Association new.		aItem key: aKey value: otroPolinomio.coeficientes at:aKey + res.coeficientes at: aKey ifAbsent: 0.		res.coeficientes add: aItem.	].	 ^res! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/4/2013 23:31'!= otroPolinomio! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/5/2013 12:40'!coeficientes! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/5/2013 12:58'!evaluar: unValor! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/4/2013 23:32'!grado! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'vane 6/13/2013 16:42'!polinomioDeGrado: aGrado conCoeficientes: aDictionary	grado := aGrado.	coeficientes := aDictionary. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Polinomio class	instanceVariableNames: ''!!Polinomio class methodsFor: 'as yet unclassified' stamp: 'vane 6/13/2013 16:50'!new 	| res aDict |	aDict := Dictionary new.	res := self new	res polinomioDeGrado: 0 conCoeficientes: aDict.	 ^res.! !!Polinomio class methodsFor: 'as yet unclassified' stamp: 'vane 6/13/2013 16:42'!new: aGrado conCoeficientes: aDictionary	| res |	res := self new.	res polinomioDeGrado: aGrado conCoeficientes: aDictionary.	^res! !