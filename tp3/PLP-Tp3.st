Object subclass: #Polinomio	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!Polinomio methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:13'!* otroPolinomio	^PProd productoDe: self y: otroPolinomio! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:12'!+ otroPolinomio	^PSuma sumaDe: self y: otroPolinomio.! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/23/2013 11:16'!= otroPolinomio	^ self grado = (otroPolinomio grado) and: [self coeficientes = otroPolinomio coeficientes]! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/5/2013 12:40'!coeficientes! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/5/2013 12:58'!evaluar: unValor! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/4/2013 23:32'!grado! !Polinomio subclass: #PProd	instanceVariableNames: 'izq der'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PProd methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/23/2013 10:48'!coeficientes	| coefsIzq coefsDer res grado coef|	coefsIzq := izq coeficientes.	coefsDer := der coeficientes.	res := Dictionary new.	coefsIzq keysAndValuesDo: [ :key1 :val1 |		coefsDer keysAndValuesDo: [ :key2 :val2 |			grado:= key1 + key2.			coef:= val1 * val2.			(res includes: grado) 			ifTrue:  [ res at:grado put:(coef + res at:grado). ]			ifFalse: [ res at:grado put:coef. ].		].	 ].	^res! !!PProd methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:25'!evaluar: unValor	^ (izq evaluar: unValor) * (der evaluar: unValor)! !!PProd methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:15'!grado	^ izq grado + der grado! !!PProd methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:09'!productoDe: aPol y: otherPol	izq := aPol.	der := otherPol.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PProd class	instanceVariableNames: ''!!PProd class methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:05'!new: izq y: der	PProd new productoDe2: izq y: der! !!PProd class methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:08'!productoDe: izq y: der	^PProd new productoDe: izq y: der! !Polinomio subclass: #PConst	instanceVariableNames: 'const'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PConst methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:53'!coeficientes	| dict |	dict := Dictionary new.	dict at: 0 put: const.	^dict! !!PConst methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 01:46'!crearConConst: aConst	"comment stating purpose of message"	const := aConst.! !!PConst methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:22'!evaluar: unValor	^const! !!PConst methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:14'!grado	^0! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PConst class	instanceVariableNames: ''!!PConst class methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 01:45'!new: aConst	"comment stating purpose of message"	 ^PConst new crearConConst: aConst! !Polinomio subclass: #PInd	instanceVariableNames: 'coef'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PInd methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:54'!coeficientes	| dict |	dict := Dictionary new.	dict at: 1 put: coef.	^dict.! !!PInd methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 01:51'!conCoef: aCoef	coef := aCoef.! !!PInd methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/23/2013 11:26'!evaluar: unValor	^unValor * coef! !!PInd methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:15'!grado	^1! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PInd class	instanceVariableNames: ''!!PInd class methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 01:50'!new: aCoef	"comment stating purpose of message"	^PInd new conCoef:aCoef! !Polinomio subclass: #PSuma	instanceVariableNames: 'izq der'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PSuma methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/23/2013 10:47'!coeficientes	| coefsIzq coefsDer |	coefsIzq := izq coeficientes.	coefsDer:= der coeficientes.	coefsIzq keysAndValuesDo: [ :key :val | 		(coefsDer includes: key) 			ifTrue: [ coefsDer at:key put: (val + coefsDer at: key)]			ifFalse: [ coefsDer at:key put: val ].	].	^coefsDer! !!PSuma methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:24'!evaluar: unValor	^(izq evaluar: unValor) + (der evaluar:unValor)! !!PSuma methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:18'!grado	| sumaIzq sumaDer |	sumaIzq := izq grado.	sumaDer := der grado.	^ (sumaIzq > sumaDer) ifTrue: sumaIzq ifFalse: sumaDer.! !!PSuma methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:10'!sumaDe: aPol y: otherPol	"comment stating purpose of message"	izq := aPol.	der:= otherPol.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PSuma class	instanceVariableNames: ''!!PSuma class methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:11'!sumaDe: aPol y: otherPol	^PSuma new sumaDe: aPol y: otherPol.! !TestCase subclass: #PolinomioTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioTest commentStamp: '<historical>' prior: 0!A PolinomioTest is a test class for testing the behavior of Polinomio!!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'NOMOLESTES 6/23/2013 10:33'!polinomio1	^(PInd new:1) + (PConst new: 69)! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'NOMOLESTES 6/23/2013 10:32'!polinomio2	^PConst new:69! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'NOMOLESTES 6/23/2013 10:35'!polinomio3	| pX |	pX := PInd new:1.	^ pX * pX * pX! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'NOMOLESTES 6/23/2013 10:37'!polinomio4	| pX p7 p90 |	pX := PInd new:1.	p7 := PConst new:7.	p90 := PConst new:90.	^(pX * pX + p7 ) * pX + p90! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'NOMOLESTES 6/23/2013 10:38'!polinomio5	| pX p0 |	pX := PInd new:1.	p0 := PConst new:0.	^ pX * (p0 + pX * pX)! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'NOMOLESTES 6/23/2013 10:34'!polinomio6	^PInd new:1! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'NOMOLESTES 6/23/2013 10:39'!polinomio7	| pX |	pX := PInd new:1.	^ pX * pX! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'NOMOLESTES 6/23/2013 10:39'!polinomio8	| pX |	pX := PInd new:1.	^ pX * pX * pX * pX * pX * pX! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:14'!testCoeficientes	"Test de coeficientes de polinomios"		|  polinomio1 polinomio4 |		polinomio1 := self polinomio1.	polinomio4 := self polinomio4.		self assert: ((polinomio1 coeficientes at: 0) = 69).	self assert: ((polinomio1 coeficientes at: 1) = 1).	self assert: ((polinomio4 coeficientes at: 0) = 90).	self assert: ((polinomio4 coeficientes at: 1) = 7).	self assert: ((polinomio4 coeficientes at: 3) = 1).	self assert: ( (polinomio4 coeficientes includesKey: 2) not).	self assert: ( (polinomio4 coeficientes includesKey: 4) not).	self assert: ( (polinomio4 coeficientes size) = 3).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/10/2013 12:03'!testEvaluar	"Test de evaluación de polinomios"	| polinomio1 polinomio2 polinomio3 polinomio4 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio4 := self polinomio4.		self assert: ( (polinomio1 evaluar:  11) = 80).		self assert: ( (polinomio2 evaluar: nil) = 69).	self assert: ( (polinomio2 evaluar: 23) = 69).		self assert: ( (polinomio3 evaluar: 3) = 27).		self assert: ( (polinomio4 evaluar: 2) = 112).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/5/2013 19:00'!testGrado	| polinomio1 polinomio2 polinomio3 polinomio4 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio4 := self polinomio4.		self assert: (polinomio1 grado = 1).	self assert: (polinomio2 grado = 0).	self assert: (polinomio3 grado = 3).	self assert: (polinomio4 grado = 3).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/18/2013 19:25'!testIgualdad	"Test de igualdad de polinomios"	| polinomio1 polinomio2 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.		self assert: ( polinomio1 = polinomio1 ).	self assert: ( (polinomio1 = polinomio2) not ).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:18'!testMetaprogramacion	| polinomio |		polinomio := self polinomio1 .	self assert: ( (polinomio evaluar: (PolinomioTest new)  ) = 'AlguienNoEntiende' ).	self assert:( (polinomio evaluar: '12') = 81). ! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/18/2013 19:26'!testMultiplicacion	"Test de multiplicacion de polinomios"	| polinomio3  polinomio6 polinomio7 |		polinomio3 := self polinomio3.	polinomio6 := self polinomio6.	polinomio7 := self polinomio7.		self assert: (polinomio6 * polinomio7 = polinomio3).	self assert: (polinomio7 * polinomio6 = polinomio3).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/5/2013 19:02'!testSuma	"Test suma de polinomios"	| polinomio1 polinomio2 polinomio6|		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio6 := self polinomio6.		self assert: (polinomio2 + polinomio6 = polinomio1).	self assert: (polinomio6 + polinomio2 = polinomio1).	! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:16'!testSupremo	"El test supremo de los polinomios"	| polinomio3 polinomio6 polinomio7 polinomio8 |		polinomio3 := self polinomio3.	polinomio6 := self polinomio6.	polinomio7 := self polinomio7.	polinomio8 := self polinomio8.			self assert: ( (polinomio6 evaluar: polinomio7) = polinomio7).		self assert: ( (polinomio3 evaluar: polinomio6) = polinomio3).		self assert: ( (polinomio3 evaluar: polinomio7) = polinomio8). 		self assert: ( (polinomio7 evaluar: polinomio3) = polinomio8). ! !