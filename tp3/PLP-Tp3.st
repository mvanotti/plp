TestCase subclass: #PolinomioTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioTest commentStamp: '<historical>' prior: 0!A PolinomioTest is a test class for testing the behavior of Polinomio!!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'MarcoVaneyLeopoldo 6/21/2013 20:17'!polinomio1	"comment stating purpose of message"	| pX p69 dict aItem  |	aItem := Association new.	aItem key: 0 value: 69.	dict:= Dictionary new.	dict add: aItem.	p69 := Polinomio new:0 conCoeficientes: dict.		aItem := Association new.	aItem key: 1 value:1.	dict := Dictionary new.	dict add: aItem.	pX := Polinomio new:1 conCoeficientes: dict.	^pX  + p69! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'LeoMarcoyVane 6/21/2013 19:05'!polinomio2	| res dict aItem |	dict:= Dictionary new.	aItem := Association new.	aItem key: 0 value: 69.	dict add: aItem.	res := Polinomio new: 0 conCoeficientes: dict.	^res.! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'MarcoVaneyLeopoldo 6/21/2013 20:40'!polinomio3	| res dict |	dict:= Dictionary new.	dict at:1 put:1.	res := Polinomio new: 1 conCoeficientes: dict.	^res * res * res.! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'MarcoVaneyLeopoldo 6/21/2013 20:35'!polinomio4	| p7 p90 pX unDict|		unDict := Dictionary new.	unDict at: 0 put: 7.	p7 := Polinomio new:0 conCoeficientes: unDict.	unDict := Dictionary new.	unDict at: 0 put: 90.	p90 := Polinomio new:0 conCoeficientes: unDict.	unDict := Dictionary new.	unDict at: 1 put: 1.	pX := Polinomio new:1 conCoeficientes: unDict.	^ (pX * pX + p7) * pX + p90! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'MarcoVaneyLeopoldo 6/21/2013 21:15'!polinomio5	| p0 pX unDict |	unDict:= Dictionary new.	unDict at: 0 put: 0.	p0 := Polinomio new: 0 conCoeficientes: unDict.	unDict:= Dictionary new.	unDict at: 1 put: 1.	pX := Polinomio new: 1 conCoeficientes: unDict.	^(p0 + pX) * pX.! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'MarcoVaneyLeopoldo 6/21/2013 20:37'!polinomio6	|unDict|	unDict:= Dictionary new.	unDict at: 1 put: 1.	 ^Polinomio new: 1 conCoeficientes: unDict.! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'MarcoVaneyLeopoldo 6/21/2013 20:38'!polinomio7	^self polinomio6 * self polinomio6! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'MarcoVaneyLeopoldo 6/21/2013 20:38'!polinomio8	^self polinomio3 * self polinomio3! !!PolinomioTest methodsFor: 'tests' stamp: 'MarcoVaneyLeopoldo 6/21/2013 19:38'!testCoeficientes	"Test de coeficientes de polinomios"		|  polinomio1 polinomio4 |		polinomio1 := self polinomio1.	polinomio4 := self polinomio4.		self assert: ((polinomio1 coeficientes at: 0) = 69).	self assert: ((polinomio1 coeficientes at: 1) = 1).	self assert: ((polinomio4 coeficientes at: 0) = 90).	self assert: ((polinomio4 coeficientes at: 1) = 7).	self assert: ((polinomio4 coeficientes at: 3) = 1).	self assert: ( (polinomio4 coeficientes includesKey: 2) not).	self assert: ( (polinomio4 coeficientes includesKey: 4) not).	self assert: ( (polinomio4 coeficientes size) = 3).! !!PolinomioTest methodsFor: 'tests' stamp: 'MarcoVaneyLeopoldo 6/21/2013 19:52'!testEvaluar	"Test de evaluación de polinomios"	| polinomio1 polinomio2 polinomio3 polinomio4 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio4 := self polinomio4.		self assert: ( (polinomio1 evaluar:  11) = 80).		self assert: ( (polinomio2 evaluar: nil) = 69).	self assert: ( (polinomio2 evaluar: 23) = 69).		self assert: ( (polinomio3 evaluar: 3) = 27).		self assert: ( (polinomio4 evaluar: 2) = 112).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/5/2013 19:00'!testGrado	| polinomio1 polinomio2 polinomio3 polinomio4 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio4 := self polinomio4.		self assert: (polinomio1 grado = 1).	self assert: (polinomio2 grado = 0).	self assert: (polinomio3 grado = 3).	self assert: (polinomio4 grado = 3).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/10/2013 12:05'!testIgualdad	"Test de igualdad de polinomios"	| polinomio1 polinomio2 polinomio3 polinomio5 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio5 := self polinomio5.		self assert: ( polinomio1 = polinomio1 ).	self assert: ( (polinomio1 = polinomio2) not ).	self assert: ( polinomio3 = polinomio5).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:18'!testMetaprogramacion	| polinomio |		polinomio := self polinomio1 .	self assert: ( (polinomio evaluar: (PolinomioTest new)  ) = 'AlguienNoEntiende' ).	self assert:( (polinomio evaluar: '12') = 81). ! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/5/2013 19:02'!testMultiplicacion	"Test de multiplicacion de polinomios"	| polinomio3 polinomio5 polinomio6 polinomio7 |		polinomio3 := self polinomio3.	polinomio5 := self polinomio5.	polinomio6 := self polinomio6.	polinomio7 := self polinomio7.		self assert: (polinomio6 * polinomio7 = polinomio3).	self assert: (polinomio7 * polinomio6 = polinomio3).	self assert: (polinomio6 * polinomio7 = polinomio5).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/5/2013 19:02'!testSuma	"Test suma de polinomios"	| polinomio1 polinomio2 polinomio6|		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio6 := self polinomio6.		self assert: (polinomio2 + polinomio6 = polinomio1).	self assert: (polinomio6 + polinomio2 = polinomio1).	! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:16'!testSupremo	"El test supremo de los polinomios"	| polinomio3 polinomio6 polinomio7 polinomio8 |		polinomio3 := self polinomio3.	polinomio6 := self polinomio6.	polinomio7 := self polinomio7.	polinomio8 := self polinomio8.			self assert: ( (polinomio6 evaluar: polinomio7) = polinomio7).		self assert: ( (polinomio3 evaluar: polinomio6) = polinomio3).		self assert: ( (polinomio3 evaluar: polinomio7) = polinomio8). 		self assert: ( (polinomio7 evaluar: polinomio3) = polinomio8). ! !Object subclass: #Polinomio	instanceVariableNames: 'coeficientes grado'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!Polinomio methodsFor: 'as yet unclassified' stamp: 'MarcoVaneyLeopoldo 6/21/2013 20:59'!* otroPolinomio	| unGrado unDict selfValue otherValue deg |	unGrado := grado + otroPolinomio grado.	unDict := Dictionary new.	coeficientes keysDo: [ :selfKey |		otroPolinomio coeficientes keysDo: [ :aKey |				selfValue := coeficientes at: selfKey.				otherValue := otroPolinomio coeficientes at: aKey.				deg := aKey + selfKey.				(unDict includesKey: deg) 					ifTrue: [unDict at:deg + selfValue * otherValue]					ifFalse: [ unDict at:deg put: selfValue * otherValue].			 ]		  ].	 ^Polinomio new:unGrado conCoeficientes: unDict! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'MarcoVaneyLeopoldo 6/21/2013 21:10'!+ otroPolinomio	| unGrado unDiccionario val1 val2|	grado > otroPolinomio grado ifTrue: [ unGrado := grado ] ifFalse: [ unGrado:= otroPolinomio grado ].	unDiccionario := Dictionary new.	coeficientes keysDo: [ :selfKey | unDiccionario at:selfKey put: (coeficientes at:selfKey).].	otroPolinomio coeficientes keysDo: [ :aKey |		val2 := otroPolinomio coeficientes at: aKey.		val1 := unDiccionario at:aKey ifPresent:[ :tmp | tmp + val2] ifAbsent: [val2].		unDiccionario at:aKey put:val1.	].	 ^Polinomio new:unGrado conCoeficientes:unDiccionario.! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'MarcoVaneyLeopoldo 6/21/2013 20:13'!= otroPolinomio	^ grado = otroPolinomio grado and: coeficientes = otroPolinomio coeficientes.! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'MarcoVaneyLeopoldo 6/21/2013 19:22'!coeficientes	^coeficientes! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'MarcoVaneyLeopoldo 6/21/2013 21:41'!evaluar: unValor	| res tmp |		res := coeficientes at: 0 ifAbsent:[nil.].		coeficientes keysAndValuesDo: [ :key :value |		key = 0 ifFalse: [			tmp := unValor.			(unValor respondsTo: #*) ifFalse: [ ^'AlguienNoEntiende' ].			(value respondsTo: #+) ifFalse: [ ^'AlguienNoEntiende' ].			(key - 1) timesRepeat: [ tmp := tmp * unValor ].						res isNil ifTrue: [res := tmp * value. ] ifFalse: [ res := res + (tmp * value). ].		].	].	^res"	| aItem unDict |	unDict := Dictionary new.	aDictionary keysDo: [ :selfKey |		aItem := Association new.		aItem key: selfKey value: (aDictionary at:selfKey).		unDict add: aItem.].	self.grado := aGrado.	self.coeficientes := unDict."! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'MarcoVaneyLeopoldo 6/21/2013 19:22'!grado	^grado! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'MarcoVaneyLeopoldo 6/21/2013 19:28'!polinomioDeGrado: aGrado conCoeficientes: aDictionary	| aItem unDict |	unDict := Dictionary new.	aDictionary keysDo: [ :selfKey |		aItem := Association new.		aItem key: selfKey value: (aDictionary at:selfKey).		unDict add: aItem.].	self.grado := aGrado.	self.coeficientes := unDict.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Polinomio class	instanceVariableNames: ''!!Polinomio class methodsFor: 'as yet unclassified' stamp: 'MarcoVaneyLeopoldo 6/21/2013 19:26'!new 	| res aDict |	aDict := Dictionary new.	res := super new.	res polinomioDeGrado: 0 conCoeficientes: aDict.	 ^res.! !!Polinomio class methodsFor: 'as yet unclassified' stamp: 'vane 6/13/2013 16:42'!new: aGrado conCoeficientes: aDictionary	| res |	res := self new.	res polinomioDeGrado: aGrado conCoeficientes: aDictionary.	^res! !