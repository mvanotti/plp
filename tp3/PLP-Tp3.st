Exception subclass: #AlguienNoEntendioException	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!Object subclass: #Polinomio	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!Polinomio methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:13'!* otroPolinomio	^PProd productoDe: self y: otroPolinomio! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:12'!+ otroPolinomio	^PSuma sumaDe: self y: otroPolinomio.! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/23/2013 11:16'!= otroPolinomio	^ self grado = (otroPolinomio grado) and: [self coeficientes = otroPolinomio coeficientes]! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/5/2013 12:40'!coeficientes! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/24/2013 16:04'!evaluar2: unValor! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/24/2013 16:05'!evaluar: unValor	| res |	[ res := self evaluar2:unValor. ] on: AlguienNoEntendioException do:[res := 'AlguienNoEntiende'.].	^res! !!Polinomio methodsFor: 'as yet unclassified' stamp: 'ManuelGimenez 6/4/2013 23:32'!grado! !Polinomio subclass: #PConst	instanceVariableNames: 'const'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PConst methodsFor: 'as yet unclassified' stamp: 'LeoMarcoyVane 6/24/2013 18:32'!coeficientes	| dict |	dict := Dictionary new.	dict at: 0 put: const.	^dict	"Polinomio c con c constante"! !!PConst methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 01:46'!crearConConst: aConst	"comment stating purpose of message"	const := aConst.! !!PConst methodsFor: 'as yet unclassified' stamp: 'LeoMarcoyVane 6/24/2013 18:32'!evaluar2: unValor	^const	"El resultado de evaluar c es c sea en lo que sea que lo evaluemos"! !!PConst methodsFor: 'as yet unclassified' stamp: 'LeoMarcoyVane 6/24/2013 18:33'!grado	^0	"El grado de un polinomio constante es 0"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PConst class	instanceVariableNames: ''!!PConst class methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 01:45'!new: aConst	"comment stating purpose of message"	 ^PConst new crearConConst: aConst! !Polinomio subclass: #PProd	instanceVariableNames: 'izq der'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PProd methodsFor: 'as yet unclassified' stamp: 'LeoMarcoyVane 6/24/2013 18:26'!coeficientes	| coefsIzq coefsDer res grado coef|	coefsIzq := izq coeficientes.	coefsDer := der coeficientes.	res := Dictionary new.	coefsIzq keysAndValuesDo: [ :key1 :val1 |		coefsDer keysAndValuesDo: [ :key2 :val2 |			grado:= key1 + key2.			coef:= val1 * val2.			(res includes: grado) 			ifTrue:  [ res at:grado put:(coef + res at:grado). ]			ifFalse: [ res at:grado put:coef. ].		].	 ].	^res	"Iteramos sobre todos los coeficientes de ambos polinomios"	"Para cada par de coeficientes, sumamos el producto de esos coeficientes"	"al coeficiente que tiene como grado la suma de los grados de dichos coeficientes"! !!PProd methodsFor: 'as yet unclassified' stamp: 'LeoMarcoyVane 6/24/2013 18:26'!evaluar2: unValor	| i d |	i := izq evaluar: unValor.	(i respondsTo:#*) ifFalse: [ AlguienNoEntendioException new signal. ].	d := der evaluar: unValor.	^i * d	"Evaluamos ambos polinomios y multiplicamos el resultado de ambas evaluaciones"! !!PProd methodsFor: 'as yet unclassified' stamp: 'LeoMarcoyVane 6/24/2013 18:24'!grado	^ izq grado + der grado	"El grado del producto es la suma de los grados"! !!PProd methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:09'!productoDe: aPol y: otherPol	izq := aPol.	der := otherPol.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PProd class	instanceVariableNames: ''!!PProd class methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:08'!productoDe: izq y: der	^PProd new productoDe: izq y: der! !Polinomio subclass: #PSuma	instanceVariableNames: 'izq der'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PSuma methodsFor: 'as yet unclassified' stamp: 'LeoMarcoyVane 6/24/2013 18:28'!coeficientes	| coefsIzq coefsDer |	coefsIzq := izq coeficientes.	coefsDer:= der coeficientes.	coefsIzq keysAndValuesDo: [ :key :val | 		(coefsDer includes: key) 			ifTrue: [ coefsDer at:key put: (val + coefsDer at: key)]			ifFalse: [ coefsDer at:key put: val ].	].	^coefsDer	"Para cada grado sumamos los coeficientes que acompañan a la variable de dicho grado"! !!PSuma methodsFor: 'as yet unclassified' stamp: 'LeoMarcoyVane 6/24/2013 18:30'!evaluar2: unValor	| i d |	i := izq evaluar: unValor.	(i respondsTo:#+) ifFalse: [ AlguienNoEntendioException new signal. ].	d := der evaluar: unValor.	^i + d	"Evaluamos los sumandos y sumamos el resultado de evaluar ambos polinomios"! !!PSuma methodsFor: 'as yet unclassified' stamp: 'LeoMarcoyVane 6/24/2013 18:31'!grado	| sumaIzq sumaDer |	sumaIzq := izq grado.	sumaDer := der grado.	^ (sumaIzq > sumaDer) ifTrue: sumaIzq ifFalse: sumaDer.	"El grado de la suma de polinomios es el mayor de los grados de ambos polinomios"	"No consideramos el caso en el que los polinomios tengan el mismo grado y sus coeficientes"	"principales sean inversos aditivos ya que es un caso super borde que no es relevante al TP"! !!PSuma methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:10'!sumaDe: aPol y: otherPol	"comment stating purpose of message"	izq := aPol.	der:= otherPol.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PSuma class	instanceVariableNames: ''!!PSuma class methodsFor: 'as yet unclassified' stamp: 'NOMOLESTES 6/22/2013 02:11'!sumaDe: aPol y: otherPol	^PSuma new sumaDe: aPol y: otherPol.! !TestCase subclass: #PolinomioTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PolinomioTest commentStamp: '<historical>' prior: 0!A PolinomioTest is a test class for testing the behavior of Polinomio!!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'NOMOLESTES 6/24/2013 15:42'!polinomio1	^(PInd new) + (PConst new: 69)! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'NOMOLESTES 6/23/2013 10:32'!polinomio2	^PConst new:69! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'NOMOLESTES 6/24/2013 15:42'!polinomio3	| pX |	pX := PInd new.	^ pX * pX * pX! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'NOMOLESTES 6/24/2013 15:42'!polinomio4	| pX p7 p90 |	pX := PInd new.	p7 := PConst new:7.	p90 := PConst new:90.	^(pX * pX + p7 ) * pX + p90! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'NOMOLESTES 6/24/2013 15:42'!polinomio5	| pX p0 |	pX := PInd new.	p0 := PConst new:0.	^ pX * (p0 + pX * pX)! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'NOMOLESTES 6/24/2013 15:42'!polinomio6	^PInd new! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'NOMOLESTES 6/24/2013 15:42'!polinomio7	| pX |	pX := PInd new.	^ pX * pX! !!PolinomioTest methodsFor: 'polinomiosDefinidos' stamp: 'NOMOLESTES 6/24/2013 15:42'!polinomio8	| pX |	pX := PInd new.	^ pX * pX * pX * pX * pX * pX! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:14'!testCoeficientes	"Test de coeficientes de polinomios"		|  polinomio1 polinomio4 |		polinomio1 := self polinomio1.	polinomio4 := self polinomio4.		self assert: ((polinomio1 coeficientes at: 0) = 69).	self assert: ((polinomio1 coeficientes at: 1) = 1).	self assert: ((polinomio4 coeficientes at: 0) = 90).	self assert: ((polinomio4 coeficientes at: 1) = 7).	self assert: ((polinomio4 coeficientes at: 3) = 1).	self assert: ( (polinomio4 coeficientes includesKey: 2) not).	self assert: ( (polinomio4 coeficientes includesKey: 4) not).	self assert: ( (polinomio4 coeficientes size) = 3).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/10/2013 12:03'!testEvaluar	"Test de evaluación de polinomios"	| polinomio1 polinomio2 polinomio3 polinomio4 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio4 := self polinomio4.		self assert: ( (polinomio1 evaluar:  11) = 80).		self assert: ( (polinomio2 evaluar: nil) = 69).	self assert: ( (polinomio2 evaluar: 23) = 69).		self assert: ( (polinomio3 evaluar: 3) = 27).		self assert: ( (polinomio4 evaluar: 2) = 112).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/5/2013 19:00'!testGrado	| polinomio1 polinomio2 polinomio3 polinomio4 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio3 := self polinomio3.	polinomio4 := self polinomio4.		self assert: (polinomio1 grado = 1).	self assert: (polinomio2 grado = 0).	self assert: (polinomio3 grado = 3).	self assert: (polinomio4 grado = 3).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/18/2013 19:25'!testIgualdad	"Test de igualdad de polinomios"	| polinomio1 polinomio2 |		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.		self assert: ( polinomio1 = polinomio1 ).	self assert: ( (polinomio1 = polinomio2) not ).! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:18'!testMetaprogramacion	| polinomio |		polinomio := self polinomio1 .	self assert: ( (polinomio evaluar: (PolinomioTest new)  ) = 'AlguienNoEntiende' ).	self assert:( (polinomio evaluar: '12') = 81). ! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/18/2013 19:26'!testMultiplicacion	"Test de multiplicacion de polinomios"	| polinomio3  polinomio6 polinomio7 |		polinomio3 := self polinomio3.	polinomio6 := self polinomio6.	polinomio7 := self polinomio7.		self assert: (polinomio6 * polinomio7 = polinomio3).	self assert: (polinomio7 * polinomio6 = polinomio3).! !!PolinomioTest methodsFor: 'tests' stamp: 'LeoMarcoyVane 6/24/2013 18:28'!testSuma	"Test suma de polinomios"	| polinomio1 polinomio2 polinomio6|		polinomio1 := self polinomio1.	polinomio2 := self polinomio2.	polinomio6 := self polinomio6.		self assert: (polinomio2 + polinomio6 = polinomio1).	self assert: (polinomio6 + polinomio2 = polinomio1).	! !!PolinomioTest methodsFor: 'tests' stamp: 'ManuelGimenez 6/11/2013 04:16'!testSupremo	"El test supremo de los polinomios"	| polinomio3 polinomio6 polinomio7 polinomio8 |		polinomio3 := self polinomio3.	polinomio6 := self polinomio6.	polinomio7 := self polinomio7.	polinomio8 := self polinomio8.			self assert: ( (polinomio6 evaluar: polinomio7) = polinomio7).		self assert: ( (polinomio3 evaluar: polinomio6) = polinomio3).		self assert: ( (polinomio3 evaluar: polinomio7) = polinomio8). 		self assert: ( (polinomio7 evaluar: polinomio3) = polinomio8). ! !Polinomio subclass: #PInd	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Tp3'!!PInd methodsFor: 'as yet unclassified' stamp: 'LeoMarcoyVane 6/24/2013 18:32'!coeficientes	| dict |	dict := Dictionary new.	dict at: 1 put: 1.	^dict.	"Polinomio X"! !!PInd methodsFor: 'as yet unclassified' stamp: 'LeoMarcoyVane 6/24/2013 18:32'!evaluar2: unValor	^unValor	"Evaluar X en unValor da unValor"! !!PInd methodsFor: 'as yet unclassified' stamp: 'LeoMarcoyVane 6/24/2013 18:32'!grado	^1	"El grado de X es 1"! !